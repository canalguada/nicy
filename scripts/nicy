#!/bin/bash
# vim: set ft=sh fdm=marker ai ts=2 sw=2 tw=79 et:

set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

PROG="nicy"

# Utils {{{
# Error codes
SUCCESS=0
FAILURE=1
EPARSE=2
ENOTCONF=3
ENOTDIR=4
EACCES=5
EINVAL=6
EALREADY=16
EJQUSAGE=66
EJQCOMPILE=67
EPERM=126
ENOTFOUND=127

error_exit() { #{{{
  echo "$PROG: error: ${2:-'unknown error'}" >&2
  exit "${1:-$EXIT_FAILURE}"
} #}}}

bool() { #{{{
  [ $# -gt 0 ] || return 2
  case "${1,,}" in
    n | no | false | off | 0 | disabled | disabled | nouse) return 1 ;;
    y | yes | true | on | 1 | enabled | enable | use) return 0 ;;
  esac
  return 1
} #}}}

true_or_false() { #{{{
  bool "$1" &&
    echo "true" ||
    echo "false"
} #}}}
#}}}

# Global variables
# ================ {{{
RUNTIMEDIR="${XDG_RUNTIME_DIR:-/run/user/$UID}/$PROG"
[ -d "$RUNTIMEDIR" ] || mkdir -p "$RUNTIMEDIR"
if [ $UID -ne 0 ]; then
  CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}/${PROG}"
else
  CACHEDIR="/var/cache/${PROG}"
fi
[ -d "$CACHEDIR" ] || mkdir -p "$CACHEDIR"

CGROUPS="$CACHEDIR/cgroups"
TYPES="$CACHEDIR/types"
RULES="$CACHEDIR/rules"
DATABASE="$CACHEDIR/database"
#}}}

# Environment variables
# ===================== {{{

prefix=/usr/local

if [ $UID -ne 0 ]; then
  CONFDIRS=( \
    "${XDG_CONFIG_HOME:-$HOME/.config}/$PROG"
    "/usr/local/etc/$PROG"
    "/etc/$PROG"
  )
else
  CONFDIRS=("/usr/local/etc/$PROG" "/etc/$PROG")
fi
# The user 's configuration files always get the highest priority.
for (( i=${#CONFDIRS[@]}-1; i>=0 ; i-- )); do
  [ ! -f "${CONFDIRS[$i]}/environment" ] ||
    . "${CONFDIRS[$i]}/environment"
done

[ -v NICY_CONF ] ||
  NICY_CONF=("${CONFDIRS[@]}")

[ -v NICY_DATA ] ||
  NICY_DATA="$prefix/share/nicy"

[ -v NICY_LIB ] ||
  NICY_LIB="$prefix/lib/nicy"

LIBDIR="${NICY_LIB}/jq"

[ -v NICY_VERBOSE ] &&
  NICY_VERBOSE=$(true_or_false "$NICY_VERBOSE") ||
  NICY_VERBOSE=true

declare -ga search_dirs
for dir in "${NICY_CONF[@]}"; do
  [ -d "$dir" ] && search_dirs+=($(realpath "$dir"))
done

NICY_IGNORE="${NICY_CONF[0]}/ignore"
NICY_SYMLINK="${NICY_CONF[0]}/symlink"

supported_shell_or_die() { #{{{
  if [[ "$1" =~ (/usr|)/bin/(sh|bash|zsh) ]] &&
    grep -q "$1" /etc/shells; then
    echo "$1"
  else
    echo "${PROG}: not supported : $1" >&2
    return 1
  fi
} #}}}

[ -v NICY_SHELL ] &&
  supported_shell_or_die "$NICY_SHELL" &>/dev/null ||
  NICY_SHELL="/bin/sh"
SCRIPT_SHELL=$NICY_SHELL

[ -v NICY_SCRIPTS ] || {
  [ $UID -ne 0 ] &&
    NICY_SCRIPTS="$HOME/bin/nicy" ||
    NICY_SCRIPTS="/usr/local/bin/nicy"
}
SCRIPTS_PATH=$NICY_SCRIPTS

NICY_SUDO=${NICY_SUDO:-sudo}

# Don't export SUDO when commands are not allowed by policy
# System utilities require CAP_SYS_NICE.
# nicy could get this capability with the following snippet:
# sudo -E capsh --caps="cap_setpcap,cap_setuid,cap_setgid+ep cap_sys_nice+eip" \
#   --keep=1 --user="$USER" --addamb="cap_sys_nice" \
#   --shell=/usr/bin/renice -- -n -3 10125
#
# Alternative : adding a requirement for user on /etc/security/capability.conf.
#
# Let's keep it simple.
if [ $UID -ne 0 ] &&
  sudo -l renice &>/dev/null; then
  declare -x SUDO=${NICY_SUDO}
else
  declare -x SUDO=
fi
[ -v SUDO ] || declare -x SUDO=":"

JQ_PATH=${JQ_PATH:-$(command -v jq)}
command -v "$JQ_PATH" &>/dev/null ||
  error_exit $ENOTFOUND "$(command -V "$JQ_PATH" 2>&1)"

jq() {
  $JQ_PATH -M "$@" 2>"$RUNTIMEDIR/${FUNCNAME[1]}.err"
  rc=$?
  case "$rc" in
    0)
      rm -f "$RUNTIMEDIR/${FUNCNAME[1]}.err"
      return $SUCCESS ;;
    2) rc=$EJQUSAGE ;;
    3) rc=$EJQCOMPILE ;;
    *) rc=$FAILURE ;;
  esac
  while read -r line; do
    echo "${PROG}: ${FUNCNAME[1]}: $line" >&2
  done <"$RUNTIMEDIR/${FUNCNAME[1]}.err"
  exit $rc
}
#}}}

# Usage
# ===== {{{

usage() { #{{{
  jq -r -L "$LIBDIR" \
    'include "usage"; main' "${NICY_DATA}/usage.json" |
    groff -T utf8
} #}}}

jq_usage() { #{{{
  jqfunction="${FUNCNAME[1]%_usage}"
  jqscript=$(printf 'include "usage"; %s' "$jqfunction")
  jq -r -L "$LIBDIR" \
    "$jqscript" "${NICY_DATA}/usage.json" |
    groff -T utf8
} #}}}

version() { #{{{
  jq -r -L "$LIBDIR" \
    'include "usage"; version' "${NICY_DATA}/usage.json" |
    groff -T utf8
} #}}}

run_usage() { jq_usage ; }
show_usage() { jq_usage ; }
list_usage() { jq_usage ; }
install_usage() { jq_usage ; }
rebuild_usage() { jq_usage ; }
manage_usage() { jq_usage ; }
#}}}

# Runtime parameters
# ================== {{{
QUIET=false
bool "$NICY_VERBOSE" &&
  VERBOSITY=1 ||
  VERBOSITY=0
PRESET=auto
USE_CGROUP=null
PROBE_CGROUP=false
ALWAYS_USE_SCOPE=false
DRY_RUN=false
LIST_CATEGORY=
LIST_DIRECTORY=
[ $UID -ne 0 ] &&
  DO_MANAGE=--user ||
  DO_MANAGE=--system
FORCE_REBUILD=false
#}}}

# Functions
# =========

# Rebuild
# -------

dump_content() { #{{{
  [ $# -lt 2 ] && return 1
  kind=${1,,}
  kind=${kind%s}
  [[ "$kind" =~ ^(cgroup|type|rule)$ ]] || return 2
  if [ "$kind" = "rule" ]; then
    depth="-mindepth 2"
    key="name"
  else
    depth="-maxdepth 1"
    key=$kind
  fi
  shift
  for confdir; do
    [ -d "$confdir" ] || continue
    find "${confdir}/" $depth -type f -iname "*.${kind}s" -print | sort -rn |
    xargs sed -E -s -e '/^\s*#/d' -e '/^$/d' \
      -e 's/("'"$key"'"\s*:)/"origin": "'"${confdir//\//\\\/}"'", \1/g'
  done
} #}}}

dump_content_file_cache() { #{{{
  kind=${1,,}
  kind=${kind%s}
  volatile="$RUNTIMEDIR/${FUNCNAME[0]}-$kind"
  for confdir in "${search_dirs[@]}"; do
    dump_content "$kind" "$confdir" |
      jq -sc -L "$LIBDIR" \
        --argjson "cachedb" '{}' \
        --arg kind "$kind" \
        'include "rebuild"; make_cache'
  done |& tee "$volatile"
} #}}}

build_json_cache() { #{{{
  jq -n \
    --slurpfile cgroups "$CGROUPS" \
    --slurpfile types "$TYPES" \
    --slurpfile rules "$RULES" \
    --arg "date" "$(date +"%s")" \
    '{ "date": $date, "cgroups": $cgroups, "types": $types, "rules": $rules }'
} #}}}

check_or_build_cache() { #{{{
  do_rebuild=${1:-false}
  for kind in "cgroup" "type" "rule"; do
    var="${kind^^}S"
    dest=${!var}
    if [ ! -f "$dest" ] || bool $do_rebuild; then
      dump_content_file_cache "$kind" >"$dest"
    fi
  done
  if [ ! -f "$DATABASE" ] || bool $do_rebuild; then
    build_json_cache >"$DATABASE"
  fi
} #}}}

# List
# ----

list() { #{{{
  [ $# -lt 2 ] && return 1
  kind=${1,,}
  kind=${kind%s}
  volatile="$RUNTIMEDIR/${FUNCNAME[0]}-$kind"
  shift
  printf '"%s"\n' "$@" |
    jq -sr -L "$LIBDIR" \
      --argjson cachedb "$(<"$DATABASE")" \
      --arg kind "$kind" \
      'include "list"; list' |&
        tee "$volatile" |
          column -t -s $'\t' | tail -n +2
} #}}}

# Run / Show
# ----------

find_cmd_path() { #{{{
  name=$(basename "$1")
  # Strip suffix, if any
  name=${name%.nicy}
  # Set an absolute path for the final command, trying to prevent loops (for
  # instance, with nested nicy invocations).
  pattern="^${NICY_SCRIPTS:-$HOME/bin/nicy}.*"
  # Not valid absolute path
  if [ "$1" = "$name" ] ||
    [[ "$(readlink -f $(which "$name") 2>/dev/null)" =~ $pattern ]]; then
    for path in $(which -a "$name"); do
      # Skip path that contains "nicy"
      [[ "$path" =~ $pattern ]] && continue
      cmd=$path
      break
    done
  else
    cmd=$1
  fi
  echo "$cmd"
} #}}}

# QUERY_TEMPLATE
# {
#   "name": null,
#   "cmd": null,
#   "preset": null,
#   "cgroup": null,
#   "probe_cgroup": null,
#   "managed": null,
#   "quiet": null,
#   "verbosity": null,
#   "shell": null,
#   "nproc": null,
#   "max_nice": null,
#   "policies": {
#     "sched": null,
#     "io": null
#   }
# }

COMMANDS="$RUNTIMEDIR/commands"
FILTER="$RUNTIMEDIR/filter"

get_cmdlines() { #{{{
  case "$1" in
    run)
      SCHED=$(LANG=C schedtool $$)
      IO=$(LANG=C ionice -p $$)
      ;;
    *)
      QUIET=true
      VERBOSITY=0
      SCHED="PID  0: PRIO   0, POLICY N: SCHED_NORMAL  , NICE   0, AFFINITY 0x1"
      IO="none: prio 0"
      ;;
  esac
  shift
  cmd=$(find_cmd_path "$1")
  jqscript='include "run" ; run'
  printf '"%s"\n' "$(basename "$cmd")" \
    "$cmd" \
    "${PRESET}" \
    "${USE_CGROUP}" \
    "${PROBE_CGROUP}" \
    "${ALWAYS_USE_SCOPE}" \
    "${QUIET}" \
    "${VERBOSITY}" \
    "$(basename "$SCRIPT_SHELL")" \
    "$(nproc --all)" \
    "$(ulimit -H -e)" \
    "$SCHED" \
    "$IO" |
    jq -sr -L "$LIBDIR" "$jqscript" \
      --argjson cachedb "$(<"$DATABASE")" >"$COMMANDS"
} #}}}

print_command() { #{{{
  text="$*"
  text=${text#echo }
  if [ $UID -ne 0 ]; then
    text=${text// \$\{user_or_system\}/ --user}
    text=${text//\$SUDO /$SUDO }
  else
    text=${text// \$\{user_or_system\}/}
    text=${text//\$SUDO /}
  fi
  text=${text//\$\$/$$}
  # text=${text// 2>\&1/}
  text=${text// >\/dev\/null/}
  echo "${PROG}: ${subcmd}: $text"
} #}}}

run_commands() { #{{{
  bool $QUIET &&
    VERBOSITY=0
  for cmdline; do
    [ -z "$cmdline" ] &&
      continue
    eval set -- $cmdline
    [[ "$*" =~ \[.*\] ]] &&
      continue
    cmd=($*)
    [[ "$*" =~ ^exec.* ]] &&
      cmd+=("${cmdargs[@]}")
    if [ $VERBOSITY -ge 1 ] || bool $DRY_RUN; then
      print_command "${cmd[@]}" >&2
    fi
    bool $DRY_RUN &&
      continue
    [ "$1" = "echo" ] &&
      "${cmd[@]}" ||
      eval "${cmd[@]}"
  done
} #}}}

dump_script() { #{{{
  echo "#!$SCRIPT_SHELL"
  for cmdline; do
    eval set -- $cmdline
    [[ "$*" =~ ^exec.* ]] &&
      echo "$*" '"$@"' ||
      echo "$*"
  done
} #}}}

# Install
# -------

remove_from_path() { #{{{
  case ":${PATH}:" in
    *":${1}:"*)
      export PATH=${PATH//${1}:/} ;;
    *) ;;
  esac
} #}}}

stream_scripts() { #{{{
  {
    if [ -f "$NICY_IGNORE" ]; then
      mapfile -t comms < <(sed -E '/^[ ]*#+/d' "$NICY_IGNORE")
      printf '"%s"\n' "${comms[@]}"
    else
      :
    fi
  } |
    jq -sr -L "$LIBDIR" \
      --argjson "cachedb" "$(<"$DATABASE")" \
      --argjson "nproc" "$(nproc --all)" \
      --argjson "max_nice" "$(ulimit -H -e)" \
      --arg "shell" "$1" \
      'include "install" ; stream_scripts_from_rules'
} #}}}

write_scripts() { #{{{
  local -a script_lines
  local name="null"
  local dest="$SCRIPTS_PATH/${name}.nicy"
  while read -r line && [ -n "$line" ]; do
    case "$line" in
      begin*)
        name=${line##* }
        dest="$SCRIPTS_PATH/${name}.nicy"
        ;;
      end*)
        name_path=$(command -v "$name")
        if [ -n  "$name_path" ]; then
          for line in "${script_lines[@]}"; do
            eval set -- ${line//%$name%/$name_path}
            [[ "$*" =~ ^exec.* ]] &&
              echo "$*" '"$@"' ||
              echo "$*"
          done >"$dest"
          chmod +x "$dest"
        fi
        unset script_lines[@]
        ;;
      *)
        script_lines+=("$line")
        ;;
    esac
  done
} #}}}

install_scripts() { #{{{
  # Create if required and remove from PATH
  [ -d "$SCRIPTS_PATH" ] ||
    mkdir -p "$SCRIPTS_PATH"
  remove_from_path "$SCRIPTS_PATH"

  # Delete nicy scripts but preserve all links
  find "${SCRIPTS_PATH}/" -type f -iname "*.nicy" -delete

  # Create nicy script for all the rules matching an available command
  stream_scripts "$SCRIPT_SHELL" |&
  tee "$RUNTIMEDIR/stream_output" |
    write_scripts || true

  # Create links for all the command names provided by the user
  if [ -f "$NICY_SYMLINK" ]; then
    (
      cd "${SCRIPTS_PATH}"
      while read -r name; do
        [ ! -f "${name}.nicy" ] && rm -f "$name" && continue
        ln -sf -T "${name}.nicy" "$name"
      done <"$NICY_SYMLINK"
    )
  fi
} #}}}

# Manage
# ------

rawprocstat() { #{{{
  cat /proc/[0-9]*/stat 2>/dev/null
  return 0
} #}}}

awkprocstat() { #{{{
  # Filter pids (default: processes own by user)
  SLICE_SKIP=' cgroup[3] !~ /user-[[:digit:]]+.slice/ '
  UID_SKIP=" uid[1] != $UID "
  [ $# -gt 0 ] &&
    case "$1" in
      --system)
        SLICE_SKIP=' cgroup[2] !~ /system.slice/ '
        unset UID_SKIP
        ;;
      --global) unset UID_SKIP ;;
      --user) ;;
      --all)
        unset SLICE_SKIP
        unset UID_SKIP
        ;;
      *) ;;
    esac

  awkscript="$(<"$NICY_LIB/procstat.awk")"
  [ -v UID_SKIP ] &&
    replace="if ($UID_SKIP) { next ; }" &&
    awkscript=${awkscript//\#UID_SKIP/$replace}
  [ -v SLICE_SKIP ] &&
    replace="if ($SLICE_SKIP) { next ; }" &&
    awkscript=${awkscript//\#SLICE_SKIP/$replace}

  # Get processes stat and format
  rawprocstat | sort -n |
    LC_ALL=C awk "$awkscript" - 2>/dev/null |
    tee "$RUNTIMEDIR/awkout"
  return 0
} #}}}

manage_processes() { #{{{
  awkprocstat "$1" |
    jq -sr -L "$LIBDIR" \
      --argjson "cachedb" "$(<"$DATABASE")" \
      --argjson "nproc" $(nproc --all) \
      --argjson "max_nice" $(ulimit -H -e) \
      --argjson "uid" $UID \
      --arg "shell" "/bin/bash" \
      'include "manage"; manage_runtime' >"$COMMANDS" || true
  return 0
} #}}}

do_lock() { #{{{
  count=3
  delay=1
  lockfile="$1/lock"
  while true; do
    let count--
    [ $count -le 0 ] && break
    [ ! -f "$lockfile" ] && break
    [ -f "$lockfile" ] && sleep $delay && continue
  done
  [ ! -f "$lockfile" ] &&
    echo "$$" >"$lockfile" &&
    return 0
  error_exit $EALREADY "locked by other (pid=$(<"$lockfile")) instance."
} #}}}

do_unlock() { #{{{
  [ -f "$1/lock" ] && rm "$1/lock" || true
} #}}}

# Options
# -------

check_missing_argument() { #{{{
  case "$OPTARG" in
    -*) error_exit $EPARSE "missing argument for option '-$option'." ;;
  esac
  return 0
} #}}}

parse_rebuild_options() { #{{{
  OPTIND=1
  while getopts ":-:hV" option; do #{{{
    case $option in
      -)
        case "$OPTARG" in
          version)
            version
            exit 0
            ;;
          help)
            rebuild_usage 
            exit 0
            ;;
          force) FORCE_REBUILD=true ;;
          -) break ;;
          *) error_exit $EPARSE "unknown option '--$OPTARG'." ;;
        esac
        ;;
      V)
        version
        exit 0
        ;;
      h)
        rebuild_usage
        exit 0
        ;;
      \?) error_exit $EPARSE "unknown option '-$OPTARG'." ;;
      :) error_exit $EPARSE "missing argument for option '-$OPTARG'." ;;
    esac
  done #}}}
  return $(($OPTIND - 1))
} #}}}

parse_list_options() { #{{{
  OPTIND=1
  while getopts ":-:hVf:" option; do #{{{
    case $option in
      -)
        case "$OPTARG" in
          version)
            version
            exit 0
            ;;
          help)
            list_usage
            exit 0
            ;;
          from=*)
            dir=${OPTARG#from=}
            dir=$(eval echo "$dir")
            [ ! -d "$dir" ] &&
              error_exit $ENOTDIR "no such directory '$dir'"
            case ":$(IFS=: ; echo "${search_dirs[*]}"):" in
              *:$(realpath "$dir"):*) ;;
              *) error_exit $ENOTCONF "not a configured '$dir'" ;;
            esac
            LIST_DIRECTORY=$dir
            ;;
          -) break ;;
          *) error_exit $EPARSE "unknown option '--$OPTARG'." ;;
        esac
        ;;
      V)
        version
        exit 0
        ;;
      h)
        list_usage
        exit 0
        ;;
      f)
        check_missing_argument
        dir=$(eval echo "$OPTARG")
        [ ! -d "$dir" ] &&
          error_exit $ENOTDIR "no such directory '$dir'"
        case ":$(IFS=: ; echo "${search_dirs[*]}"):" in
          *:$(realpath "$dir"):*) ;;
          *) error_exit $ENOTCONF "not a configured '$dir'" ;;
        esac
        LIST_DIRECTORY=$dir
        ;;
      \?) error_exit $EPARSE "unknown option '-$OPTARG'." ;;
      :) error_exit $EPARSE "missing argument for option '-$OPTARG'." ;;
    esac
  done #}}}
  return $(($OPTIND - 1))
} #}}}

parse_install_options() { #{{{
  OPTIND=1
  while getopts ":-:hV" option; do #{{{
    case $option in
      -)
        case "$OPTARG" in
          version)
            version
            exit 0
            ;;
          help)
            install_usage
            exit 0
            ;;
          shell=*)
            value=${OPTARG#shell=}
            supported_shell_or_die "$value" &>/dev/null &&
              SCRIPT_SHELL=$value || {
                echo "${PROG}: not supported : $value. Using $NICY_SHELL" >&2
                SCRIPT_SHELL=$NICY_SHELL
              }
            ;;
          path=*)
            dir=$(eval echo "${OPTARG#path=}")
            [ -d "$dir" ] ||
              error_exit $ENOTDIR "no such directory '$dir'"
            [ -w "$dir" ] ||
              error_exit $EACCES "not writable directory '$dir'"
            SCRIPTS_PATH=$dir
            ;;
          -) break ;;
          *) error_exit $EPARSE "unknown option '--$OPTARG'." ;;
        esac
        ;;
      V)
        version
        exit 0
        ;;
      h)
        install_usage
        exit 0
        ;;
      \?) error_exit $EPARSE "unknown option '-$OPTARG'." ;;
      :) error_exit $EPARSE "missing argument for option '-$OPTARG'." ;;
    esac
  done #}}}
  return $(($OPTIND - 1))
} #}}}

parse_manage_options() { #{{{
  OPTIND=1
  while getopts ":-:hVn" option; do #{{{
    case $option in
      -)
        case "$OPTARG" in
          version)
            version
            exit 0
            ;;
          help)
            manage_usage
            exit 0
            ;;
          dry-run) DRY_RUN=true ;;
          user|system|global|all) DO_MANAGE="--$OPTARG" ;;
          -) break ;;
          *) error_exit $EPARSE "unknown option '--$OPTARG'." ;;
        esac
        ;;
      V)
        version
        exit 0
        ;;
      h)
        manage_usage
        exit 0
        ;;
      n) DRY_RUN=true ;;
      \?) error_exit $EPARSE "unknown option '-$OPTARG'." ;;
      :) error_exit $EPARSE "missing argument for option '-$OPTARG'." ;;
    esac
  done #}}}
  return $(($OPTIND - 1))
} #}}}

parse_run_or_show_options() { #{{{
  OPTIND=1
  while getopts ":-:hVnqvp:c:dzmu" option; do #{{{
    case $option in
      -)
        case "$OPTARG" in
          version)
            version
            exit 0
            ;;
          help)
            [ "$subcmd" = "run" ] &&
              run_usage ||
              show_usage
            exit 0
            ;;
          dry-run)
            [ "$subcmd" = "run" ] &&
              DRY_RUN=true ||
              error_exit $EPARSE "unknown option '--$OPTARG'."
            ;;
          quiet) QUIET=true ;;
          verbose) VERBOSITY=$(($VERBOSITY + 1)) ;;
          preset=*) # Accepts auto, default, cgroup-only or any known type
            value=${OPTARG#preset=}
            [[ "${value,,}" =~ (auto|default|cgroup-only) ]] &&
              PRESET="${value,,}" ||
              PRESET="$value"
            ;;
          cgroup=*) USE_CGROUP="${OPTARG#cgroup=}" ;;
          default) PRESET="default" ;;
          cgroup-only) PRESET="cgroup-only" ;;
          managed) ALWAYS_USE_SCOPE=true ;;
          force-cgroup) PROBE_CGROUP=true ;;
          cpu*) USE_CGROUP="$OPTARG" ;;
          -) break ;;
          *) error_exit $EPARSE "unknown option '--$OPTARG'." ;;
        esac
        ;;
      V)
        version
        exit 0
        ;;
      h)
        [ "$subcmd" = "run" ] &&
          run_usage ||
          show_usage
        exit 0
        ;;
      n)
        [ "$subcmd" = "run" ] &&
          DRY_RUN=true ||
          error_exit $EPARSE "unknown option '-$option'."
        ;;
      q) QUIET=true ;;
      v) VERBOSITY=$(($VERBOSITY + 1))   ;;
      m) ALWAYS_USE_SCOPE=true ;;
      u) PROBE_CGROUP=true ;;
      p) # Accepts auto, default, cgroup-only or any known type
        check_missing_argument
        value=$OPTARG
        [[ "${value,,}" =~ (auto|default|cgroup-only) ]] &&
          PRESET="${value,,}" ||
          PRESET="$value"
        ;;
      c) check_missing_argument && USE_CGROUP="$OPTARG" ;;
      d) PRESET="default" ;;
      z) PRESET="cgroup-only" ;;
      \?) error_exit $EPARSE "unknown option '-$OPTARG'." ;;
      :) error_exit $EPARSE "missing argument for option '-$OPTARG'." ;;
    esac
  done #}}}
  return $(($OPTIND - 1))
} #}}}

# Main
# ----

if [ $# -gt 0 ]; then
  subcmd=$1
  shift
else
  usage
  exit 1
fi

case "$subcmd" in
  version | -V | --version) #{{{
    version
    exit 0
    ;; #}}}
  help | -h | --help) #{{{
    usage
    exit 0
    ;; #}}}
  rebuild) #{{{
    parse_rebuild_options "$@" || shift $?
    if [ $# -eq 0 ]; then
      echo "Building json cache..."
      (cd $CACHEDIR && rm -f rules types cgroups)
      # Rebuild the json cache files
      check_or_build_cache "$FORCE_REBUILD"
      echo "Done."
      exit 0
    else
      rebuild_usage
      error_exit $EINVAL "too many arguments."
    fi
    ;; #}}}
  run | show) #{{{
    parse_run_or_show_options "$@" || shift $?
    ;; #}}}
  list) #{{{
    parse_list_options "$@" || shift $?
    if [ -z "$1" ]; then
      list_usage
      error_exit $EPARSE "missing category."
    elif [ $# -gt 1 ]; then
      list_usage
      error_exit $EINVAL "too many arguments."
    else
      kind=${1,,}
      kind=${kind%s}
      case "$kind" in
        rule | type | cgroup) LIST_CATEGORY=$kind ;;
        *) error_exit $EINVAL "not a valid category '$1'." ;;
      esac
    fi
    # Rebuild the json cache files
    check_or_build_cache
    [ -z "$LIST_DIRECTORY" ] &&
      list "$LIST_CATEGORY" "${search_dirs[@]}" ||
      list "$LIST_CATEGORY" "$LIST_DIRECTORY"
    exit 0
    ;; #}}}
  install) #{{{
    parse_install_options "$@" || shift $?
    if [ $# -gt 0 ]; then
      install_usage
      error_exit $EINVAL "too many arguments."
    fi
    # Rebuild the json cache files
    check_or_build_cache "yes"
    echo -n "Installing $(basename $SCRIPT_SHELL) scripts in $SCRIPTS_PATH ... "
    install_scripts
    echo "All done."
    exit 0
    ;; #}}}
  manage) #{{{
    parse_manage_options "$@" || shift $?
    if [[ "$DO_MANAGE" =~ --(system|global|all) ]]; then
      [ $UID -eq 0 ] ||
        error_exit $EPERM "not available without root privileges: '$DO_MANAGE'."
    fi
    if [ $# -gt 0 ]; then
      manage_usage
      error_exit $EINVAL "too many arguments."
    fi
    ;; #}}}
  procstat)
    awkprocstat "$@"
    exit 0
    ;;
  *)
    usage
    error_exit $EINVAL "unknown subcommand '$subcmd'."
    ;;
esac

case "$subcmd" in
  show|run)
    if [ $# -gt 0 ]; then
      which "$1" &>/dev/null ||
        error_exit $ENOTFOUND "$1 not found"
      name=$1
      shift
      # Save the command arguments, if any, for later use
      declare -ga cmdargs=("$@")
    else
      "${subcmd}_usage"
      error_exit $EPARSE "missing command."
    fi
    ;;
esac

# Lock the runtime dir
do_lock "$RUNTIMEDIR"

# Purge old runtime files and check cache
find "${RUNTIMEDIR}/" -mindepth 1 -maxdepth 1 -type f -delete
check_or_build_cache

# Set environment
[ $UID -ne 0 ] &&
  declare -x user_or_system=--user ||
  declare -x user_or_system=

# Get commands
case "$subcmd" in
  run | show) get_cmdlines "$subcmd" "$name" ;;
  manage) manage_processes "$DO_MANAGE" ;;
esac

mapfile -t cmdlines <"$COMMANDS"

# Unlock the runtime dir
do_unlock "$RUNTIMEDIR"

case "$subcmd" in
  show)
    dump_script "${cmdlines[@]:1}"
    ;;
  run)
    run_commands "${cmdlines[@]:1}"
    ;;
  manage)
    run_commands "${cmdlines[@]}"
    ;;
esac
exit $?
