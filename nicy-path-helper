#!/bin/bash
# vim: set ft=sh fdm=marker ai ts=2 sw=2 tw=79 et:

PROG="$(basename "$0")"

# Goodbye root !
[ $UID -eq 0 ] && exit 4

# The environment variables must be set
if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/nicy/environment" ]; then
  . "${XDG_CONFIG_HOME:-$HOME/.config}/nicy/environment"
else
  exit 1
fi
[ ${#NICY_SEARCH_DIRS[@]} -gt 0 ] || exit 2

# Create if required and remove from PATH {{{
SCRIPTS_PATH=${NICY_SCRIPTS_PATH:-$HOME/bin/nicy}
[ -d "$SCRIPTS_PATH" ] ||
  mkdir -p "$SCRIPTS_PATH"
case ":${PATH}:" in
  *":$SCRIPTS_PATH:"*)
    export PATH=${PATH//$(sed 's/\//\\\//g' <<<"$SCRIPTS_PATH"):/} ;;
  *) ;;
esac
#}}}

# Delete nicy scripts but preserve all links {{{
find "${SCRIPTS_PATH}/" -type f -iname "*.nicy" -delete
#}}}

dump_rules () { #{{{
  # ignore file tracks the rules to skip, not adding a nicy script for the
  # commands listed
  rc_ignore="${XDG_CONFIG_HOME:-$HOME/.config}/nicy/ignore"
  nicy -k "rules" | awk '{print $1}' | sort |
    {
      if [ -f "$rc_ignore" ]; then
        comm -13 "$rc_ignore" -
      else
        cat -
      fi
    }
}
#}}}

# Rebuild the json cache files
nicy --rebuild
# Create nicy script for all the rules matching an available command {{{
dump_rules | while read -r name; do
  name_path=$(command -v "$name")
  [ -z  "$name_path" ] && continue
  cur_path="${SCRIPTS_PATH}/${name}.nicy"
  nicy -s -q $name_path >"$cur_path"
  chmod +x "$cur_path"
  sleep 2
done
#}}}

# # Create links for all the command names provided by the user {{{
rc_symlink="${XDG_CONFIG_HOME:-$HOME/.config}/nicy/symlink"
if [ -f "$rc_symlink" ]; then
  (
  cd "${SCRIPTS_PATH}"
  while read -r name; do
    [ ! -f "${name}.nicy" ] && rm -f "$name" && continue
    ln -sf -T "${name}.nicy" "$name"
  done <"$rc_symlink"
  )
fi
#}}}

exit 0
